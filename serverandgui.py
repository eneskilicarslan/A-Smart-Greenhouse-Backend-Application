# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Enes\aloo\deneme.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import socket
import select  # os level io capability to send and recieve data....
import time
import xlsxwriter
from datetime import datetime


HEADERSIZE = 10
IP = "0.0.0.0"
PORT = 1234

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # reconnect enabled

server_socket.bind((IP, PORT))

server_socket.listen()

sockets_list = [server_socket]  # client-list actually

clients = {}  # client-socket => key, user data => value

myClients = {}  #key=>socket id, value=>socket username

seraTemperatureList = []

GHList = []
anlikTemp = []
timeList=[]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        # MainWindow Properties
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(342, 567)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(342, 567))
        MainWindow.setMaximumSize(QtCore.QSize(342, 567))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # layouts
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 10, 321, 511))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        # inner frame properties
        self.frame = QtWidgets.QFrame(self.gridLayoutWidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # LED
        self.seraTempVal = QtWidgets.QLCDNumber(self.frame)
        self.seraTempVal.setGeometry(QtCore.QRect(10, 10, 301, 51))
        self.seraTempVal.setObjectName("seraTempVal")
        self.seraTempVal.setStyleSheet(u"color: rgb(255, 69, 78)")

        # sera list properties
        self.seraList = QtWidgets.QComboBox(self.frame)
        self.seraList.setGeometry(QtCore.QRect(10, 320, 301, 21))
        self.seraList.setObjectName("seraList")

        #fonts
        font = QtGui.QFont()
        font.setFamily(u"Bahnschrift")
        font.setPointSize(14)

        font1 = QtGui.QFont()
        font1.setFamily(u"Bahnschrift")
        font1.setPointSize(12)
        font1.setBold(True)
        font1.setWeight(75)

        font3 = QtGui.QFont()
        font3.setFamily(u"Bahnschrift")
        font3.setPointSize(10)
        font3.setBold(True)
        font3.setWeight(75)

        #yeni - excel and word
        self.excel = QtWidgets.QPushButton(self.frame)
        self.excel.setObjectName(u"excel")
        self.excel.setGeometry(QtCore.QRect(160, 420, 151, 81))
        self.excel.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.excel.setFont(font1)
        self.excel.setStyleSheet(u"background-color: rgb(131, 255, 152)")


        self.word = QtWidgets.QPushButton(self.frame)
        self.word.setObjectName(u"word")
        self.word.setGeometry(QtCore.QRect(10, 420, 151, 81))
        self.word.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.word.setFont(font1)
        self.word.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.word.setStyleSheet(u"background-color: rgb(107, 164, 255);")

        # Sera Information Text Box Setting
        self.seraInfo = QtWidgets.QTextBrowser(self.frame)
        self.seraInfo.setGeometry(QtCore.QRect(10, 70, 301, 241))
        self.seraInfo.setObjectName("seraInfo")
        self.seraInfo.setFont(font)

        # Information update collaborates with seraList
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(10, 350, 301, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setFont(font3)

        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(20, 380, 281, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(20, 400, 281, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        # menu bar
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 342, 21))
        self.menubar.setObjectName("menubar")
        self.menuMenu = QtWidgets.QMenu(self.menubar)
        self.menuMenu.setObjectName("menuMenu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionSave_Current = QtWidgets.QAction(MainWindow)
        self.actionSave_Current.setObjectName("actionSave_Current")
        self.actionEdit_Current = QtWidgets.QAction(MainWindow)
        self.actionEdit_Current.setObjectName("actionEdit_Current")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuMenu.addAction(self.actionSave_Current)
        self.menuMenu.addAction(self.actionEdit_Current)
        self.menuMenu.addSeparator()
        self.menuMenu.addAction(self.actionExit)
        self.menubar.addAction(self.menuMenu.menuAction())

        self.retranslateUi(MainWindow)
        self.seraList.currentIndexChanged['QString'].connect(self.seraInfo.update)
        self.seraList.currentIndexChanged['QString'].connect(self.seraTempVal.update)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.startTimer)
        self.excel.clicked.connect(self.extractAsXslx)
        self.word.clicked.connect(self.beginJob)

        ### TIMER
    def startTimer(self):
        timer = QtCore.QTimer(self.centralwidget)
        timer.timeout.connect(self.beginJob)
        timer.start(41000)

        #

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "GreenHouse"))
        self.seraInfo.setPlaceholderText(_translate("MainWindow", "GreenHouse Info"))
        self.pushButton.setText(_translate("MainWindow", "Update Info Repetitively"))
        self.menuMenu.setTitle(_translate("MainWindow", "Menu"))
        self.actionSave_Current.setText(_translate("MainWindow", "Save Current"))
        self.actionEdit_Current.setText(_translate("MainWindow", "Edit Current"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.word.setText(QtCore.QCoreApplication.translate("MainWindow", u"Get Sera List", None))
        self.excel.setText(QtCore.QCoreApplication.translate("MainWindow", u"Extract as Excel", None))

    def updateSeraList(self):
        self.seraList.clear()

        pass

    def receive_message(self, client_socket):
        try:
            message_header = client_socket.recv(HEADERSIZE)

            if not len(message_header):
                return False

            message_length = int(message_header.decode("utf-8").strip())
            return {"header": message_header, "data": client_socket.recv(message_length)}

        except:
            return False

    def beginJob(self):
        print("0")
        read_sockets, _, exception_sockets = select.select(sockets_list, [], sockets_list)  # read list - write list - error list

        print("1")
        for notified_socket in read_sockets:
            print("1.2")
            if notified_socket == server_socket:  # someone connected

                client_socket, client_address = server_socket.accept()

                print("2")
                user = self.receive_message(client_socket)
                if user is False:
                    continue

                sockets_list.append(client_socket)
                clients[client_socket] = user

                myClients[client_address[1]] = user['data'].decode('utf-8')
                self.seraList.addItem(user['data'].decode('utf-8'))

                #add to combobox

                print(
                    f"Accepted new connection from {client_address[0]}:{client_address[1]} username:{user['data'].decode('utf-8')}")

            else:
                message = self.receive_message(notified_socket)

                print("3")
                if message is False:
                    print(f"Closed connection from {clients[notified_socket]['data'].decode('utf-8')}")
                    sockets_list.remove(notified_socket)
                    del clients[notified_socket]
                    del myClients[notified_socket.getpeername()[1]]
                    #
                    continue

                user = clients[notified_socket]
                print(f"{user['data'].decode('utf-8')}> {message['data'].decode('utf-8')}")
                seraTemperature, seraInfoText = message['data'].decode('utf-8').split("+")

                #### EXCEL İÇİN ##########################
                GHList.append(myClients[notified_socket.getpeername()[1]])
                anlikTemp.append(seraTemperature)
                print(GHList)
                print(anlikTemp)
                now = datetime.now()
                timeList.append(now.strftime("%d/%m/%Y %H:%M:%S"))
                ##########################################

                if myClients[notified_socket.getpeername()[1]] == self.seraList.currentText():
                    self.seraTempVal.setProperty("value", seraTemperature)
                    self.seraInfo.setText(seraInfoText)
                    print(myClients)



                '''
                for client_socket in clients:
                    if client_socket != notified_socket:
                        client_socket.send(user['header'] + user['data'] + message['header'] + message['data'])
                '''

        for notified_socket in exception_sockets:
            sockets_list.remove(notified_socket)
            del clients[notified_socket]
        pass

    def extractAsXslx(self):

        workbook = xlsxwriter.Workbook('write_list.xlsx')
        worksheet = workbook.add_worksheet()

        for row_num, data in enumerate(GHList):
            worksheet.write(row_num, 0, data)

        for row_num, data in enumerate(anlikTemp):
            worksheet.write(row_num, 1, data)

        for row_num, data in enumerate(timeList):
            worksheet.write(row_num, 2, data)

        workbook.close()



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

